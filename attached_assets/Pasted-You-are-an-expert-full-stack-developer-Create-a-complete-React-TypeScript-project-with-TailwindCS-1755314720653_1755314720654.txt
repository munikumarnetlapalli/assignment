You are an expert full-stack developer. Create a complete React + TypeScript project with TailwindCSS and Storybook. The goal is to build two reusable UI components (InputField and DataTable) and document them in Storybook. The project must be clean, production-ready, and deployable on Vercel.

ðŸ“¦ Project Setup:
- Use React + TypeScript
- Configure TailwindCSS properly (tailwind.config.js and index.css)
- Add Storybook (latest) with TypeScript and Tailwind support
- Scripts: `npm start` for React app, `npm run storybook` for Storybook
- Clear folder structure under src/components/
- Project should run locally without errors

ðŸŽ¯ Component 1: InputField
Build a reusable InputField component with props:

interface InputFieldProps {
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  label?: string;
  placeholder?: string;
  helperText?: string;
  errorMessage?: string;
  disabled?: boolean;
  invalid?: boolean;
  variant?: 'filled' | 'outlined' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
}

Features:
- Label, placeholder, helper text, error message
- States: disabled, invalid, loading
- Variants: filled, outlined, ghost
- Sizes: sm, md, lg
- Optional: clear button, password toggle
- Light & dark theme with Tailwind classes

ðŸŽ¯ Component 2: DataTable
Build a reusable DataTable component with props:

interface DataTableProps<T> {
  data: T[];
  columns: Column<T>[];
  loading?: boolean;
  selectable?: boolean;
  onRowSelect?: (selectedRows: T[]) => void;
}

interface Column<T> {
  header: string;
  accessor: keyof T;
  sortable?: boolean;
}

Features:
- Display tabular data dynamically
- Column sorting (ASC/DESC toggle)
- Row selection (single/multiple)
- Loading state (skeleton or spinner)
- Empty state with message
- Responsive for mobile & desktop

ðŸ“˜ Storybook Documentation:
For both components, create stories that include:
- Component name & description
- Props & API definitions (TypeScript types)
- Use cases & real-world examples
- States & variants
- Interaction behavior
- Accessibility notes (ARIA roles, keyboard navigation)
- Theming (light/dark)
- Responsiveness examples
- Best practices (doâ€™s & donâ€™ts)

Story examples:
- InputField: Default, ErrorState, Disabled, Loading, Variants, Sizes
- DataTable: Default, EmptyState, Loading, WithSelection, Sorted

ðŸ“„ README.md:
Write a clear README including:
- Project overview
- Tech stack: React, TypeScript, TailwindCSS, Storybook
- Installation steps
- How to run React app
- How to run Storybook
- Deployment notes (Vercel + Chromatic)
- Short description of approach

ðŸš€ Output:
- A complete React + TypeScript + TailwindCSS + Storybook project
- Folder structure: src/components/InputField, src/components/DataTable, .storybook/
- InputField.tsx, DataTable.tsx, and their corresponding .stories.tsx files
- Professional README.md
- Must run with `npm install && npm start` and `npm run storybook` without errors
